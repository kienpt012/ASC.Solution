@model ASC.Web.Areas.Configuration.Models.MasterValuesViewModel
@{
    Layout = "_SecureLayout";
}

<div class="row"></div>
<div class="row padding-top-20px">
    <div class="row z-depth-3">
        <div class="section white-text padding-left-10px blue-grey lighten-1">
            <h5>Master Values</h5>
        </div>
        <div class="divider"></div>
        <div class="col s4 padding-bottom-15px">
            <select id="ddlMasterKeys" asp-items="@(new SelectList(ViewBag.MasterKeys,"RowKey","PartitionKey"))">
                <option value="">--Select--</option>
            </select>
            <label>Partition Key</label>
        </div>
        <div class="col s4 offset-s4 padding-bottom-15px right-align">
            <a class="modal-trigger waves-effect waves-light" href="#modal1">
                <img src="~/images/excel.png" />
            </a>
        </div>
        <div class="col s12 padding-bottom-15px">
            <table class="highlight centered" id="tblMasterValues">
                <thead>
                    <tr>
                        <th data-field="RowKey">Row Key</th>
                        <th data-field="PartitionKey">Partition Key</th>
                        <th data-field="Name">Name</th>
                        <th data-field="IsActive">Is Active</th>
                        <th data-field="Actions">Edit</th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>

    <div class="row"></div>

    <div class="row z-depth-3">
        <div class="col s12 padding-0px">
            <div class="section white-text padding-left-10px blue-grey lighten-1">
                <h5>Master Value Details</h5>
            </div>
            <div class="divider"></div>
            <form asp-controller="MasterData" asp-action="MasterValues" method="post" class="col s12" id="formMasterValue">
                <div class="row">
                    <input type="hidden" asp-for="IsEdit" />
                    <input type="hidden" asp-for="MasterValueInContext.RowKey" />
                    <input type="hidden" asp-for="MasterValueInContext.PartitionKey" />
                    <div class="input-field col s4">
                        <input asp-for="MasterValueInContext.RowKey" id="Input_MasterKey_RowKey" disabled="disabled" />
                        <label asp-for="MasterValueInContext.RowKey"></label>
                    </div>
                    <div class="input-field col s4">
                        <select id="Select_MasterValueInContext_PartitionKey"
                                asp-for="MasterValueInContext.PartitionKey"
                                asp-items="@(new SelectList(ViewBag.MasterKeys,"RowKey","PartitionKey"))"
                                required="required">
                            <option value="">--Select--</option>
                        </select>
                        <label>Partition Key</label>
                    </div>
                    <div class="input-field col s4">
                        <input asp-for="MasterValueInContext.Name" class="validate" />
                        <label asp-for="MasterValueInContext.Name"></label>
                    </div>
                </div>
                <div class="row">
                    <div class="input-field col s4">
                        <div class="switch">
                            <label>
                                Is Active
                                <input asp-for="MasterValueInContext.IsActive" class="validate" />
                                <span class="lever"></span>
                            </label>
                        </div>
                    </div>
                    <div class="input-field col s8 right-align">
                        <button class="btn waves-effect waves-light btnSubmit" type="button" name="action">
                            Create
                            <i class="material-icons right">send</i>
                        </button>
                        <button class="btn waves-effect waves-light reset red lighten-1" type="button" name="action">
                            Reset
                        </button>
                    </div>
                    <div class="row col s12 right-align" asp-validation-summary="All"></div>
                </div>
            </form>
        </div>
        <div class="row"></div>
    </div>
</div>

<!-- Modal Structure -->
<div id="modal1" class="modal modal-fixed-footer">
    <div class="modal-content">
        <h4>Upload Excel</h4>
        <p>Upload the Excel file which contains all the master values.</p>
        <div class="row hide divErrors">
            <div class="col s12">
                <div class="card-panel red lighten-1">
                    <span class="white-text errors"></span>
                </div>
            </div>
        </div>
        <div class="progress hide">
            <div class="indeterminate"></div>
        </div>
        <form id="formUploadExcel" action="/Configuration/MasterData/UploadExcel" method="post" enctype="multipart/form-data">
            <div class="file-field input-field">
                <div class="btn">
                    <span>File</span>
                    <input type="file" id="files" accept=".xlsx,.xls">
                </div>
                <div class="file-path-wrapper">
                    <input class="file-path validate" type="text">
                </div>
                <div class="input-field row right">
                    <button class="btn waves-effect waves-light btnUpload" type="button" name="action">
                        Upload
                        <i class="material-icons right">send</i>
                    </button>
                </div>
            </div>
        </form>
    </div>
    <div class="modal-footer">
        <a href="#!" class="modal-close waves-effect waves-green btn-flat">Close</a>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Get CSRF token for request validation
            const token = document.querySelector('input[type=hidden][name=__RequestVerificationToken]').value;

            // Configure default fetch headers
            const fetchOptions = {
                headers: {
                    'RequestVerificationToken': token,
                    'Content-Type': 'application/json'
                },
                cache: 'no-store'
            };

            // Initialize Materialize components
            const selects = document.querySelectorAll('select');
            selects.forEach(select => M.FormSelect.init(select));
            const modals = document.querySelectorAll('.modal');
            modals.forEach(modal => M.Modal.init(modal));

            // Initialize DataTable
            const table = new DataTable('#tblMasterValues', {
                ajax: {
                    url: '/Configuration/MasterData/MasterValuesByKey',
                    type: 'GET',
                    dataSrc: '',
                    data: () => {
                        const key = document.querySelector('#ddlMasterKeys').value;
                        return key ? { key: key } : {};
                    }
                },
                pageLength: 3,
                lengthMenu: [[3, 5, 10, -1], [3, 5, 10, 'All']],
                columns: [
                    { data: 'RowKey' },
                    { data: 'PartitionKey' },
                    { data: 'Name' },
                    { data: 'IsActive' },
                    { data: 'Actions' }
                ],
                columnDefs: [
                    {
                        targets: 3,
                        data: 'IsActive',
                        render: (data) =>
                            data ?
                            `<img src="/images/green_tick.png" alt="Active" />` :
                            `<img src="/images/red_cross.png" alt="Inactive" />`
                    },
                    {
                        targets: 4,
                        data: 'Actions',
                        render: () =>
                            `<i class="small material-icons edit cursor-hand">mode_edit</i>`
                    }
                ]
            });

            // Style DataTable
            document.querySelector('#tblMasterValues').style.width = '100%';

            // Reset functionality
            document.addEventListener('click', (e) => {
                if (e.target.classList.contains('reset')) {
                    const form = document.querySelector('#formMasterValue');
                    form.reset();
                    document.querySelector('.btnSubmit').textContent = 'Create';
                    document.querySelector('#IsEdit').value = 'False';

                    // Enable partition key select
                    const partitionSelect = document.querySelector('#Select_MasterValueInContext_PartitionKey');
                    M.FormSelect.getInstance(partitionSelect).destroy();
                    partitionSelect.removeAttribute('disabled');
                    M.FormSelect.init(partitionSelect);

                    // Clear validation messages
                    const validationSummary = document.querySelector('.validation-summary-valid ul');
                    if (validationSummary) validationSummary.innerHTML = '';
                    M.updateTextFields();
                    console.log('Form reset');
                }
            });

            // Edit functionality
            document.addEventListener('click', (e) => {
                if (e.target.classList.contains('edit')) {
                    const row = e.target.closest('tr');
                    const user = table.row(row).data();

                    document.querySelector('#IsEdit').value = 'True';

                    // Map fields
                    document.querySelector('#MasterValueInContext_RowKey').value = user.RowKey || '';
                    document.querySelector('#Input_MasterKey_RowKey').value = user.RowKey || '';
                    document.querySelector('#MasterValueInContext_PartitionKey').value = user.PartitionKey || '';
                    document.querySelector('#MasterValueInContext_Name').value = user.Name || '';
                    document.querySelector('#MasterValueInContext_IsActive').checked = !!user.IsActive;

                    // Update partition key select
                    const partitionSelect = document.querySelector('#Select_MasterValueInContext_PartitionKey');
                    M.FormSelect.getInstance(partitionSelect).destroy();
                    const option = partitionSelect.querySelector(`option[value="${user.RowKey}"]`);
                    if (option) {
                        option.selected = true;
                    } else {
                        console.warn(`No option found for PartitionKey: ${user.RowKey}`);
                        partitionSelect.value = '';
                    }
                    partitionSelect.setAttribute('disabled', 'disabled');
                    M.FormSelect.init(partitionSelect);

                    // Update UI
                    document.querySelector('.btnSubmit').textContent = 'Save';
                    document.querySelector('.select-wrapper').classList.remove('valid');
                    document.querySelector('#MasterValueInContext_Name').classList.add('valid');
                    M.updateTextFields();
                    console.log('Edit mode activated:', user);
                }
            });

            // Dropdown change event
            document.querySelector('#ddlMasterKeys').addEventListener('change', () => {
                const key = document.querySelector('#ddlMasterKeys').value;
                if (key) {
                    table.ajax.reload();
                    console.log('Dropdown changed, reloading table with key:', key);
                } else {
                    table.clear().draw();
                    console.log('No key selected, cleared table');
                }
            });

            // Save/Create button
            document.addEventListener('click', async (e) => {
                if (e.target.classList.contains('btnSubmit')) {
                    const form = document.querySelector('#formMasterValue');
                    if (form.checkValidity()) {
                        const masterData = {
                            Name: document.querySelector('#MasterValueInContext_Name').value,
                            PartitionKey: document.querySelector('#Select_MasterValueInContext_PartitionKey').value,
                            IsActive: document.querySelector('#MasterValueInContext_IsActive').checked,
                            ...(document.querySelector('#IsEdit').value === 'True' && {
                                RowKey: document.querySelector('#MasterValueInContext_RowKey').value
                            })
                        };

                        try {
                            const response = await fetch('/Configuration/MasterData/MasterValues', {
                                ...fetchOptions,
                                method: 'POST',
                                body: JSON.stringify({
                                    masterValue: masterData,
                                    isEdit: document.querySelector('#IsEdit').value
                                })
                            });

                            if (!response.ok) {
                                const errorText = await response.text();
                                throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
                            }

                            const result = await response.json();
                            if (result.errors) {
                                const validationSummary = document.querySelector('.validation-summary-valid ul');
                                validationSummary.innerHTML = result.errors.map(err => `<li>${err}</li>`).join('');
                                M.toast({html: 'Validation errors occurred.'});
                                return;
                            }

                            // Reload table
                            const key = document.querySelector('#ddlMasterKeys').value;
                            table.ajax.reload();
                            console.log('Data saved successfully:', masterData);

                            // Reset form
                            document.querySelector('.reset').click();
                            document.querySelector('.select-wrapper').classList.remove('valid');
                            M.toast({html: 'Data saved successfully!'});
                        } catch (error) {
                            console.error('Error saving data:', error);
                            M.toast({html: 'Error saving data. Please try again.'});
                        }
                    } else {
                        M.toast({html: 'Please fill all required fields.'});
                        console.log('Form validation failed');
                    }
                }
            });

            // Excel upload
            document.addEventListener('click', async (e) => {
                if (e.target.classList.contains('btnUpload')) {
                    const fileInput = document.querySelector('#files');
                    const progress = document.querySelector('.progress');
                    const errorDiv = document.querySelector('.divErrors');
                    const errorSpan = document.querySelector('.errors');

                    if (!fileInput.files.length) {
                        errorDiv.classList.remove('hide');
                        errorSpan.textContent = 'Please select a file.';
                        M.toast({html: 'Please select a file.'});
                        return;
                    }

                    const formData = new FormData();
                    formData.append('file', fileInput.files[0]);

                    try {
                        progress.classList.remove('hide');
                        errorDiv.classList.add('hide');

                        const response = await fetch('/Configuration/MasterData/UploadExcel', {
                            method: 'POST',
                            headers: {
                                'RequestVerificationToken': token
                            },
                            body: formData
                        });

                        progress.classList.add('hide');

                        if (!response.ok) {
                            const errorText = await response.text();
                            throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
                        }

                        const result = await response.json();
                        if (result.errors) {
                            errorDiv.classList.remove('hide');
                            errorSpan.textContent = result.errors.join(', ');
                            M.toast({html: 'Error uploading file.'});
                            return;
                        }

                        table.ajax.reload();
                        M.Modal.getInstance(document.querySelector('#modal1')).close();
                        M.toast({html: 'File uploaded successfully!'});
                        console.log('File uploaded successfully');
                    } catch (error) {
                        progress.classList.add('hide');
                        errorDiv.classList.remove('hide');
                        errorSpan.textContent = error.message;
                        M.toast({html: 'Error uploading file. Please try again.'});
                        console.error('Error uploading file:', error);
                    }
                }
            });
        });
    </script>
}